
import java.io.File;
import java.io.FileReader;
import java.io.IOException;
import java.math.BigInteger;
import java.nio.charset.StandardCharsets;
import java.security.Key;
import java.security.KeyPair;
import java.security.MessageDigest;
import java.security.NoSuchAlgorithmException;
import java.security.Security;
import java.util.Arrays;
import java.util.Base64;
import javax.crypto.Cipher;
import javax.crypto.spec.SecretKeySpec;
import org.json.JSONObject;

public class TestSHA256 {

    private static final String SECRET_KEY = "DTBN";

    public static String encrypt(String strToEncrypt, String myKey) {
        try {
            MessageDigest sha = MessageDigest.getInstance("SHA-1");
            byte[] key = myKey.getBytes("UTF-8");
            key = sha.digest(key);
            key = Arrays.copyOf(key, 16);
            SecretKeySpec secretKey = new SecretKeySpec(key, "AES");
            Cipher cipher = Cipher.getInstance("AES/ECB/PKCS5Padding");
            cipher.init(Cipher.ENCRYPT_MODE, secretKey);
            return Base64.getEncoder().encodeToString(cipher.doFinal(strToEncrypt.getBytes("UTF-8")));
        } catch (Exception e) {
            System.out.println(e.toString());
        }
        return null;
    }

    public static String decrypt(String strToDecrypt, String myKey) {
        try {
            MessageDigest sha = MessageDigest.getInstance("SHA-1");
            byte[] key = myKey.getBytes("UTF-8");
            key = sha.digest(key);
            key = Arrays.copyOf(key, 16);
            SecretKeySpec secretKey = new SecretKeySpec(key, "AES");
            Cipher cipher = Cipher.getInstance("AES/ECB/PKCS5PADDING");
            cipher.init(Cipher.DECRYPT_MODE, secretKey);
            return new String(cipher.doFinal(Base64.getDecoder().decode(strToDecrypt)));
        } catch (Exception e) {
            System.out.println(e.toString());
        }
        return null;
    }

    public static byte[] getSHA(String input) throws NoSuchAlgorithmException {
        // Static getInstance method is called with hashing SHA
        MessageDigest md = MessageDigest.getInstance("SHA-256");

        // digest() method called
        // to calculate message digest of an input
        // and return array of byte
        return md.digest(input.getBytes(StandardCharsets.UTF_8));
    }

    public static String toHexString(byte[] hash) {
        // Convert byte array into signum representation
        BigInteger number = new BigInteger(1, hash);

        // Convert message digest into hex value
        StringBuilder hexString = new StringBuilder(number.toString(16));

        // Pad with leading zeros
        while (hexString.length() < 32) {
            hexString.insert(0, '0');
        }

        return hexString.toString();
    }


    public static void main(String[] args) throws NoSuchAlgorithmException {

        //B1: JSONObject to String
        JSONObject user = new JSONObject();
        user.put("username", "Ngan");
        user.put("id", "1");
        String dataString = user.toString();
        System.out.println("Data:" + dataString);
        //B2: encryptAES
        String encrypt = encrypt(dataString, SECRET_KEY);
        System.out.println("Encoding: " + encrypt);
        //decrypt AES
//        String decrypt = decrypt(encrypt, SECRET_KEY);
//        System.out.println("Decoding: " + decrypt);
        //B3: SHA256
        String toHexString = toHexString(getSHA(dataString));
        System.out.println("HashCode Generated by SHA-256 for " + dataString + ": " + toHexString);
        //B4: B2+B3
        String encryptAESSHA256 = encrypt + ":" + toHexString;
        System.out.println(encryptAESSHA256);

        //Cac buoc giai ma
        //B5: giai ma AES
        String[] split = encryptAESSHA256.split(":");
        String decrypt = decrypt(split[0], SECRET_KEY);
        System.out.println("Decoding: " + decrypt);

        String toHexString1 = toHexString(getSHA(decrypt));
        System.out.println(toHexString1);

        if (toHexString1.equals(toHexString)) {
            System.out.println(decrypt);

        }




    }

}
